import { ReliableTxtDocument, ReliableTxtEncoding } from '@stenway/reliabletxt';
export declare class SyncReliableTxtFileHandle {
    private handle;
    readonly encoding: ReliableTxtEncoding;
    private mode;
    readonly preambleSize: number;
    readonly existing: boolean;
    get isClosed(): boolean;
    get canRead(): boolean;
    get canWrite(): boolean;
    private constructor();
    getSize(): number;
    getIsEmpty(): boolean;
    private getAllBytes;
    getDocument(): ReliableTxtDocument;
    appendText(text: string): void;
    readBytes(buffer: Uint8Array, offset: number, length: number, position?: number | null): number;
    truncate(goalLength: number): void;
    close(): void;
    static createReader(filePath: string): SyncReliableTxtFileHandle;
    static createWriter(filePath: string, encoding?: ReliableTxtEncoding, overwriteExisting?: boolean): SyncReliableTxtFileHandle;
    static createAppender(filePath: string, createWithEncoding?: ReliableTxtEncoding): SyncReliableTxtFileHandle;
    private static getEncodingOrNull;
}
export declare class ReliableTxtFileHandle {
    private handle;
    readonly encoding: ReliableTxtEncoding;
    private mode;
    readonly preambleSize: number;
    readonly existing: boolean;
    get isClosed(): boolean;
    get canRead(): boolean;
    get canWrite(): boolean;
    private constructor();
    getSize(): Promise<number>;
    getIsEmpty(): Promise<boolean>;
    private getAllBytes;
    getDocument(): Promise<ReliableTxtDocument>;
    appendText(text: string): Promise<void>;
    readBytes(buffer: Uint8Array, offset: number, length: number, position?: number | null): Promise<number>;
    truncate(goalLength: number): Promise<void>;
    close(): Promise<void>;
    static createReader(filePath: string): Promise<ReliableTxtFileHandle>;
    static createWriter(filePath: string, encoding?: ReliableTxtEncoding, overwriteExisting?: boolean): Promise<ReliableTxtFileHandle>;
    static createAppender(filePath: string, createWithEncoding?: ReliableTxtEncoding): Promise<ReliableTxtFileHandle>;
    private static getEncodingOrNull;
}
export declare abstract class ReliableTxtFile {
    static loadSync(filePath: string): ReliableTxtDocument;
    static load(filePath: string): Promise<ReliableTxtDocument>;
    static readAllTextSync(filePath: string): string;
    static readAllText(filePath: string): Promise<string>;
    static readAllLinesSync(filePath: string): string[];
    static readAllLines(filePath: string): Promise<string[]>;
    static saveSync(document: ReliableTxtDocument, filePath: string, overwriteExisting?: boolean): void;
    static save(document: ReliableTxtDocument, filePath: string, overwriteExisting?: boolean): Promise<void>;
    static writeAllTextSync(content: string, filePath: string, encoding?: ReliableTxtEncoding, overwriteExisting?: boolean): void;
    static writeAllText(content: string, filePath: string, encoding?: ReliableTxtEncoding, overwriteExisting?: boolean): Promise<void>;
    static writeAllLinesSync(lines: string[], filePath: string, encoding?: ReliableTxtEncoding, overwriteExisting?: boolean): void;
    static writeAllLines(lines: string[], filePath: string, encoding?: ReliableTxtEncoding, overwriteExisting?: boolean): Promise<void>;
    private static appendSync;
    private static append;
    static appendAllTextSync(content: string, filePath: string, createWithEncoding?: ReliableTxtEncoding): void;
    static appendAllText(content: string, filePath: string, createWithEncoding?: ReliableTxtEncoding): Promise<void>;
    static appendAllLinesSync(lines: string[], filePath: string, createWithEncoding?: ReliableTxtEncoding): void;
    static appendAllLines(lines: string[], filePath: string, createWithEncoding?: ReliableTxtEncoding): Promise<void>;
}
export declare class SyncReliableTxtStreamReader {
    readonly handle: SyncReliableTxtFileHandle;
    private position;
    private buffer;
    private rest;
    get isClosed(): boolean;
    get encoding(): ReliableTxtEncoding;
    private constructor();
    static create(filePath: string, chunkSize?: number): SyncReliableTxtStreamReader;
    static getAppendReader(handle: SyncReliableTxtFileHandle, chunkSize?: number): SyncReliableTxtStreamReader;
    readLine(): string | null;
    close(): void;
}
export declare class ReliableTxtStreamReader {
    readonly handle: ReliableTxtFileHandle;
    private position;
    private buffer;
    private rest;
    get isClosed(): boolean;
    get encoding(): ReliableTxtEncoding;
    private constructor();
    static create(filePath: string, chunkSize?: number): Promise<ReliableTxtStreamReader>;
    static getAppendReader(handle: ReliableTxtFileHandle, chunkSize?: number): ReliableTxtStreamReader;
    readLine(): Promise<string | null>;
    close(): Promise<void>;
}
export declare enum WriterMode {
    Create = 0,
    CreateOrOverwrite = 1,
    CreateOrAppend = 2
}
export declare class SyncReliableTxtStreamWriter {
    readonly handle: SyncReliableTxtFileHandle;
    private isEmpty;
    get isClosed(): boolean;
    get encoding(): ReliableTxtEncoding;
    get existing(): boolean;
    private constructor();
    static create(filePath: string, createWithEncoding?: ReliableTxtEncoding, mode?: WriterMode): SyncReliableTxtStreamWriter;
    write(text: string): void;
    writeLine(line: string): void;
    writeLines(lines: string[]): void;
    internalTruncate(goalLength: number): void;
    close(): void;
}
export declare class ReliableTxtStreamWriter {
    readonly handle: ReliableTxtFileHandle;
    private isEmpty;
    get isClosed(): boolean;
    get encoding(): ReliableTxtEncoding;
    get existing(): boolean;
    private constructor();
    static create(filePath: string, createWithEncoding?: ReliableTxtEncoding, mode?: WriterMode): Promise<ReliableTxtStreamWriter>;
    write(text: string): Promise<void>;
    writeLine(line: string): Promise<void>;
    writeLines(lines: string[]): Promise<void>;
    internalTruncate(goalLength: number): Promise<void>;
    close(): Promise<void>;
}
export declare class SyncReverseLineIterator {
    private handle;
    private position;
    private buffer;
    private constructor();
    static create(handle: SyncReliableTxtFileHandle): SyncReverseLineIterator;
    getLine(): string;
    getPosition(): number;
}
export declare class ReverseLineIterator {
    private handle;
    private position;
    private buffer;
    private constructor();
    static create(handle: ReliableTxtFileHandle): Promise<ReverseLineIterator>;
    getLine(): Promise<string>;
    getPosition(): number;
}
//# sourceMappingURL=reliabletxt-io.d.ts.map